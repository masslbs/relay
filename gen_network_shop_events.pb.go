// Generated from /nix/store/48d398y3dfpbayxh96vgyhqlq5jirh9z-source/network-schema/shop_events.proto at version v3 (6147809bbce291ee5ed436e8cc9f0ef8858e6ec3)

// SPDX-FileCopyrightText: 2024 Mass Labs
//
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.24.4
// source: shop_events.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// First genisis message of a shop.
// Has to be the first message that is written and can only be written once.
// Can be used to represent the current state of a shop's
type Manifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shop metadata lives in the NFT
	TokenId *Uint256 `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// currency managment
	Payees             []*Payee        `protobuf:"bytes,2,rep,name=payees,proto3" json:"payees,omitempty"`
	AcceptedCurrencies []*ShopCurrency `protobuf:"bytes,3,rep,name=accepted_currencies,json=acceptedCurrencies,proto3" json:"accepted_currencies,omitempty"`
	// the currency listings are priced in
	PricingCurrency     *ShopCurrency         `protobuf:"bytes,4,opt,name=pricing_currency,json=pricingCurrency,proto3" json:"pricing_currency,omitempty"`
	ShippingRegions     []*ShippingRegion     `protobuf:"bytes,5,rep,name=shipping_regions,json=shippingRegions,proto3" json:"shipping_regions,omitempty"`
	OrderPriceModifiers []*OrderPriceModifier `protobuf:"bytes,6,rep,name=order_price_modifiers,json=orderPriceModifiers,proto3" json:"order_price_modifiers,omitempty"`
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{0}
}

func (x *Manifest) GetTokenId() *Uint256 {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *Manifest) GetPayees() []*Payee {
	if x != nil {
		return x.Payees
	}
	return nil
}

func (x *Manifest) GetAcceptedCurrencies() []*ShopCurrency {
	if x != nil {
		return x.AcceptedCurrencies
	}
	return nil
}

func (x *Manifest) GetPricingCurrency() *ShopCurrency {
	if x != nil {
		return x.PricingCurrency
	}
	return nil
}

func (x *Manifest) GetShippingRegions() []*ShippingRegion {
	if x != nil {
		return x.ShippingRegions
	}
	return nil
}

func (x *Manifest) GetOrderPriceModifiers() []*OrderPriceModifier {
	if x != nil {
		return x.OrderPriceModifiers
	}
	return nil
}

// State transition for the manifest
type UpdateManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddPayee                    *Payee                `protobuf:"bytes,2,opt,name=add_payee,json=addPayee,proto3,oneof" json:"add_payee,omitempty"`
	RemovePayee                 *Payee                `protobuf:"bytes,3,opt,name=remove_payee,json=removePayee,proto3,oneof" json:"remove_payee,omitempty"`
	AddAcceptedCurrencies       []*ShopCurrency       `protobuf:"bytes,4,rep,name=add_accepted_currencies,json=addAcceptedCurrencies,proto3" json:"add_accepted_currencies,omitempty"`
	RemoveAcceptedCurrencies    []*ShopCurrency       `protobuf:"bytes,5,rep,name=remove_accepted_currencies,json=removeAcceptedCurrencies,proto3" json:"remove_accepted_currencies,omitempty"`
	SetPricingCurrency          *ShopCurrency         `protobuf:"bytes,6,opt,name=set_pricing_currency,json=setPricingCurrency,proto3,oneof" json:"set_pricing_currency,omitempty"`
	AddOrderPriceModifiers      []*OrderPriceModifier `protobuf:"bytes,9,rep,name=add_order_price_modifiers,json=addOrderPriceModifiers,proto3" json:"add_order_price_modifiers,omitempty"`
	RemoveOrderPriceModifierIds []*ObjectId           `protobuf:"bytes,10,rep,name=remove_order_price_modifier_ids,json=removeOrderPriceModifierIds,proto3" json:"remove_order_price_modifier_ids,omitempty"`
	AddShippingRegions          []*ShippingRegion     `protobuf:"bytes,7,rep,name=add_shipping_regions,json=addShippingRegions,proto3" json:"add_shipping_regions,omitempty"`
	RemoveShippingRegions       []string              `protobuf:"bytes,8,rep,name=remove_shipping_regions,json=removeShippingRegions,proto3" json:"remove_shipping_regions,omitempty"`
}

func (x *UpdateManifest) Reset() {
	*x = UpdateManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateManifest) ProtoMessage() {}

func (x *UpdateManifest) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateManifest.ProtoReflect.Descriptor instead.
func (*UpdateManifest) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateManifest) GetAddPayee() *Payee {
	if x != nil {
		return x.AddPayee
	}
	return nil
}

func (x *UpdateManifest) GetRemovePayee() *Payee {
	if x != nil {
		return x.RemovePayee
	}
	return nil
}

func (x *UpdateManifest) GetAddAcceptedCurrencies() []*ShopCurrency {
	if x != nil {
		return x.AddAcceptedCurrencies
	}
	return nil
}

func (x *UpdateManifest) GetRemoveAcceptedCurrencies() []*ShopCurrency {
	if x != nil {
		return x.RemoveAcceptedCurrencies
	}
	return nil
}

func (x *UpdateManifest) GetSetPricingCurrency() *ShopCurrency {
	if x != nil {
		return x.SetPricingCurrency
	}
	return nil
}

func (x *UpdateManifest) GetAddOrderPriceModifiers() []*OrderPriceModifier {
	if x != nil {
		return x.AddOrderPriceModifiers
	}
	return nil
}

func (x *UpdateManifest) GetRemoveOrderPriceModifierIds() []*ObjectId {
	if x != nil {
		return x.RemoveOrderPriceModifierIds
	}
	return nil
}

func (x *UpdateManifest) GetAddShippingRegions() []*ShippingRegion {
	if x != nil {
		return x.AddShippingRegions
	}
	return nil
}

func (x *UpdateManifest) GetRemoveShippingRegions() []string {
	if x != nil {
		return x.RemoveShippingRegions
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*Account_Add
	//	*Account_Remove
	//	*Account_EnrollKeycard
	//	*Account_RevokeKeycard
	Action isAccount_Action `protobuf_oneof:"action"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{2}
}

func (m *Account) GetAction() isAccount_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Account) GetAdd() *Account_OnchainAction {
	if x, ok := x.GetAction().(*Account_Add); ok {
		return x.Add
	}
	return nil
}

func (x *Account) GetRemove() *Account_OnchainAction {
	if x, ok := x.GetAction().(*Account_Remove); ok {
		return x.Remove
	}
	return nil
}

func (x *Account) GetEnrollKeycard() *Account_KeyCardEnroll {
	if x, ok := x.GetAction().(*Account_EnrollKeycard); ok {
		return x.EnrollKeycard
	}
	return nil
}

func (x *Account) GetRevokeKeycard() *PublicKey {
	if x, ok := x.GetAction().(*Account_RevokeKeycard); ok {
		return x.RevokeKeycard
	}
	return nil
}

type isAccount_Action interface {
	isAccount_Action()
}

type Account_Add struct {
	// this message is created by the relay when it sees an address being
	// added as a clerk
	Add *Account_OnchainAction `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type Account_Remove struct {
	// this message is created by the relay when it sees a clerk's address
	// being deleted.
	Remove *Account_OnchainAction `protobuf:"bytes,2,opt,name=remove,proto3,oneof"`
}

type Account_EnrollKeycard struct {
	EnrollKeycard *Account_KeyCardEnroll `protobuf:"bytes,3,opt,name=enroll_keycard,json=enrollKeycard,proto3,oneof"`
}

type Account_RevokeKeycard struct {
	RevokeKeycard *PublicKey `protobuf:"bytes,4,opt,name=revoke_keycard,json=revokeKeycard,proto3,oneof"`
}

func (*Account_Add) isAccount_Action() {}

func (*Account_Remove) isAccount_Action() {}

func (*Account_EnrollKeycard) isAccount_Action() {}

func (*Account_RevokeKeycard) isAccount_Action() {}

// Used to create a listing
// as well as repersent the latest value after some updates
type Listing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *ObjectId        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price     *Uint256         `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Metadata  *ListingMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ViewState ListingViewState `protobuf:"varint,4,opt,name=view_state,json=viewState,proto3,enum=market.mass.ListingViewState" json:"view_state,omitempty"`
	Options   []*ListingOption `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	// one for each combination of variations
	StockStatuses []*ListingStockStatus `protobuf:"bytes,6,rep,name=stock_statuses,json=stockStatuses,proto3" json:"stock_statuses,omitempty"`
}

func (x *Listing) Reset() {
	*x = Listing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listing) ProtoMessage() {}

func (x *Listing) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listing.ProtoReflect.Descriptor instead.
func (*Listing) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{3}
}

func (x *Listing) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Listing) GetPrice() *Uint256 {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Listing) GetMetadata() *ListingMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Listing) GetViewState() ListingViewState {
	if x != nil {
		return x.ViewState
	}
	return ListingViewState_LISTING_VIEW_STATE_UNSPECIFIED
}

func (x *Listing) GetOptions() []*ListingOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Listing) GetStockStatuses() []*ListingStockStatus {
	if x != nil {
		return x.StockStatuses
	}
	return nil
}

// State transition of a listing
type UpdateListing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *ObjectId                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Price              *Uint256                      `protobuf:"bytes,2,opt,name=price,proto3,oneof" json:"price,omitempty"`
	Metadata           *ListingMetadata              `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	ViewState          *ListingViewState             `protobuf:"varint,4,opt,name=view_state,json=viewState,proto3,enum=market.mass.ListingViewState,oneof" json:"view_state,omitempty"`
	AddOptions         []*ListingOption              `protobuf:"bytes,5,rep,name=add_options,json=addOptions,proto3" json:"add_options,omitempty"`
	RemoveOptionIds    []*ObjectId                   `protobuf:"bytes,6,rep,name=remove_option_ids,json=removeOptionIds,proto3" json:"remove_option_ids,omitempty"`
	AddVariations      []*UpdateListing_AddVariation `protobuf:"bytes,7,rep,name=add_variations,json=addVariations,proto3" json:"add_variations,omitempty"`
	RemoveVariationIds []*ObjectId                   `protobuf:"bytes,8,rep,name=remove_variation_ids,json=removeVariationIds,proto3" json:"remove_variation_ids,omitempty"`
	StockUpdates       []*ListingStockStatus         `protobuf:"bytes,9,rep,name=stock_updates,json=stockUpdates,proto3" json:"stock_updates,omitempty"`
}

func (x *UpdateListing) Reset() {
	*x = UpdateListing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateListing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListing) ProtoMessage() {}

func (x *UpdateListing) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListing.ProtoReflect.Descriptor instead.
func (*UpdateListing) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateListing) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateListing) GetPrice() *Uint256 {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *UpdateListing) GetMetadata() *ListingMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateListing) GetViewState() ListingViewState {
	if x != nil && x.ViewState != nil {
		return *x.ViewState
	}
	return ListingViewState_LISTING_VIEW_STATE_UNSPECIFIED
}

func (x *UpdateListing) GetAddOptions() []*ListingOption {
	if x != nil {
		return x.AddOptions
	}
	return nil
}

func (x *UpdateListing) GetRemoveOptionIds() []*ObjectId {
	if x != nil {
		return x.RemoveOptionIds
	}
	return nil
}

func (x *UpdateListing) GetAddVariations() []*UpdateListing_AddVariation {
	if x != nil {
		return x.AddVariations
	}
	return nil
}

func (x *UpdateListing) GetRemoveVariationIds() []*ObjectId {
	if x != nil {
		return x.RemoveVariationIds
	}
	return nil
}

func (x *UpdateListing) GetStockUpdates() []*ListingStockStatus {
	if x != nil {
		return x.StockUpdates
	}
	return nil
}

// the inventory number to add or subtract from a listing
// Seprated from listing, since this is private
type ChangeInventory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ObjectId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// each variation must belong to a different option
	VariationIds []*ObjectId `protobuf:"bytes,2,rep,name=variation_ids,json=variationIds,proto3" json:"variation_ids,omitempty"`
	Diff         int32       `protobuf:"zigzag32,3,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *ChangeInventory) Reset() {
	*x = ChangeInventory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeInventory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeInventory) ProtoMessage() {}

func (x *ChangeInventory) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeInventory.ProtoReflect.Descriptor instead.
func (*ChangeInventory) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeInventory) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ChangeInventory) GetVariationIds() []*ObjectId {
	if x != nil {
		return x.VariationIds
	}
	return nil
}

func (x *ChangeInventory) GetDiff() int32 {
	if x != nil {
		return x.Diff
	}
	return 0
}

// Creates a tag in the shop
// also used to represent the current value
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *ObjectId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ListingIds []*ObjectId `protobuf:"bytes,3,rep,name=listing_ids,json=listingIds,proto3" json:"listing_ids,omitempty"`
	Deleted    bool        `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{6}
}

func (x *Tag) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetListingIds() []*ObjectId {
	if x != nil {
		return x.ListingIds
	}
	return nil
}

func (x *Tag) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

// These can be used to group items into categories.
type UpdateTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *ObjectId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rename           *string     `protobuf:"bytes,2,opt,name=rename,proto3,oneof" json:"rename,omitempty"`
	AddListingIds    []*ObjectId `protobuf:"bytes,3,rep,name=add_listing_ids,json=addListingIds,proto3" json:"add_listing_ids,omitempty"`
	RemoveListingIds []*ObjectId `protobuf:"bytes,4,rep,name=remove_listing_ids,json=removeListingIds,proto3" json:"remove_listing_ids,omitempty"`
	Delete           *bool       `protobuf:"varint,5,opt,name=delete,proto3,oneof" json:"delete,omitempty"`
}

func (x *UpdateTag) Reset() {
	*x = UpdateTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTag) ProtoMessage() {}

func (x *UpdateTag) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTag.ProtoReflect.Descriptor instead.
func (*UpdateTag) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTag) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateTag) GetRename() string {
	if x != nil && x.Rename != nil {
		return *x.Rename
	}
	return ""
}

func (x *UpdateTag) GetAddListingIds() []*ObjectId {
	if x != nil {
		return x.AddListingIds
	}
	return nil
}

func (x *UpdateTag) GetRemoveListingIds() []*ObjectId {
	if x != nil {
		return x.RemoveListingIds
	}
	return nil
}

func (x *UpdateTag) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

// current state of an order.
// not transmitted over the event stream
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *ObjectId      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Items []*OrderedItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// can be used for note keeping like delivery statuses and tracking codes
	MerchantNotes  string                 `protobuf:"bytes,3,opt,name=merchant_notes,json=merchantNotes,proto3" json:"merchant_notes,omitempty"`
	CanceledAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=canceled_at,json=canceledAt,proto3,oneof" json:"canceled_at,omitempty"`
	CommitedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=commited_at,json=commitedAt,proto3,oneof" json:"commited_at,omitempty"`
	InvoiceAddress *AddressDetails        `protobuf:"bytes,6,opt,name=invoice_address,json=invoiceAddress,proto3,oneof" json:"invoice_address,omitempty"`
	// no shipping addr assumes invoice addr
	ShippingAddress  *AddressDetails        `protobuf:"bytes,7,opt,name=shipping_address,json=shippingAddress,proto3,oneof" json:"shipping_address,omitempty"`
	AddressUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=address_updated_at,json=addressUpdatedAt,proto3,oneof" json:"address_updated_at,omitempty"`
	// mandatory if state was commited
	ChosenPayee             *Payee                 `protobuf:"bytes,9,opt,name=chosen_payee,json=chosenPayee,proto3,oneof" json:"chosen_payee,omitempty"`
	ChosenCurrency          *ShopCurrency          `protobuf:"bytes,10,opt,name=chosen_currency,json=chosenCurrency,proto3,oneof" json:"chosen_currency,omitempty"`
	PaymentDetails          *PaymentDetails        `protobuf:"bytes,11,opt,name=payment_details,json=paymentDetails,proto3,oneof" json:"payment_details,omitempty"`
	PaymentDetailsCreatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=payment_details_created_at,json=paymentDetailsCreatedAt,proto3,oneof" json:"payment_details_created_at,omitempty"`
	WittnessedTransactions  []*OrderTransaction    `protobuf:"bytes,13,rep,name=wittnessed_transactions,json=wittnessedTransactions,proto3" json:"wittnessed_transactions,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{8}
}

func (x *Order) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Order) GetItems() []*OrderedItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Order) GetMerchantNotes() string {
	if x != nil {
		return x.MerchantNotes
	}
	return ""
}

func (x *Order) GetCanceledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Order) GetCommitedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitedAt
	}
	return nil
}

func (x *Order) GetInvoiceAddress() *AddressDetails {
	if x != nil {
		return x.InvoiceAddress
	}
	return nil
}

func (x *Order) GetShippingAddress() *AddressDetails {
	if x != nil {
		return x.ShippingAddress
	}
	return nil
}

func (x *Order) GetAddressUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AddressUpdatedAt
	}
	return nil
}

func (x *Order) GetChosenPayee() *Payee {
	if x != nil {
		return x.ChosenPayee
	}
	return nil
}

func (x *Order) GetChosenCurrency() *ShopCurrency {
	if x != nil {
		return x.ChosenCurrency
	}
	return nil
}

func (x *Order) GetPaymentDetails() *PaymentDetails {
	if x != nil {
		return x.PaymentDetails
	}
	return nil
}

func (x *Order) GetPaymentDetailsCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDetailsCreatedAt
	}
	return nil
}

func (x *Order) GetWittnessedTransactions() []*OrderTransaction {
	if x != nil {
		return x.WittnessedTransactions
	}
	return nil
}

type CreateOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ObjectId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateOrder) Reset() {
	*x = CreateOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrder) ProtoMessage() {}

func (x *CreateOrder) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrder.ProtoReflect.Descriptor instead.
func (*CreateOrder) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrder) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

type UpdateOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ObjectId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Action:
	//
	//	*UpdateOrder_Cancel_
	//	*UpdateOrder_ChangeItems_
	//	*UpdateOrder_CommitItems_
	//	*UpdateOrder_SetInvoiceAddress
	//	*UpdateOrder_SetShippingAddress
	//	*UpdateOrder_ChoosePayment
	//	*UpdateOrder_SetPaymentDetails
	//	*UpdateOrder_AddWittnessedTx
	//	*UpdateOrder_SetMerchantNotes
	Action isUpdateOrder_Action `protobuf_oneof:"action"`
}

func (x *UpdateOrder) Reset() {
	*x = UpdateOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrder) ProtoMessage() {}

func (x *UpdateOrder) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrder.ProtoReflect.Descriptor instead.
func (*UpdateOrder) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateOrder) GetId() *ObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *UpdateOrder) GetAction() isUpdateOrder_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *UpdateOrder) GetCancel() *UpdateOrder_Cancel {
	if x, ok := x.GetAction().(*UpdateOrder_Cancel_); ok {
		return x.Cancel
	}
	return nil
}

func (x *UpdateOrder) GetChangeItems() *UpdateOrder_ChangeItems {
	if x, ok := x.GetAction().(*UpdateOrder_ChangeItems_); ok {
		return x.ChangeItems
	}
	return nil
}

func (x *UpdateOrder) GetCommitItems() *UpdateOrder_CommitItems {
	if x, ok := x.GetAction().(*UpdateOrder_CommitItems_); ok {
		return x.CommitItems
	}
	return nil
}

func (x *UpdateOrder) GetSetInvoiceAddress() *AddressDetails {
	if x, ok := x.GetAction().(*UpdateOrder_SetInvoiceAddress); ok {
		return x.SetInvoiceAddress
	}
	return nil
}

func (x *UpdateOrder) GetSetShippingAddress() *AddressDetails {
	if x, ok := x.GetAction().(*UpdateOrder_SetShippingAddress); ok {
		return x.SetShippingAddress
	}
	return nil
}

func (x *UpdateOrder) GetChoosePayment() *UpdateOrder_ChoosePaymentMethod {
	if x, ok := x.GetAction().(*UpdateOrder_ChoosePayment); ok {
		return x.ChoosePayment
	}
	return nil
}

func (x *UpdateOrder) GetSetPaymentDetails() *PaymentDetails {
	if x, ok := x.GetAction().(*UpdateOrder_SetPaymentDetails); ok {
		return x.SetPaymentDetails
	}
	return nil
}

func (x *UpdateOrder) GetAddWittnessedTx() *OrderTransaction {
	if x, ok := x.GetAction().(*UpdateOrder_AddWittnessedTx); ok {
		return x.AddWittnessedTx
	}
	return nil
}

func (x *UpdateOrder) GetSetMerchantNotes() string {
	if x, ok := x.GetAction().(*UpdateOrder_SetMerchantNotes); ok {
		return x.SetMerchantNotes
	}
	return ""
}

type isUpdateOrder_Action interface {
	isUpdateOrder_Action()
}

type UpdateOrder_Cancel_ struct {
	Cancel *UpdateOrder_Cancel `protobuf:"bytes,2,opt,name=cancel,proto3,oneof"`
}

type UpdateOrder_ChangeItems_ struct {
	ChangeItems *UpdateOrder_ChangeItems `protobuf:"bytes,3,opt,name=change_items,json=changeItems,proto3,oneof"`
}

type UpdateOrder_CommitItems_ struct {
	// starting checkout, items locked, payment timer running
	CommitItems *UpdateOrder_CommitItems `protobuf:"bytes,4,opt,name=commit_items,json=commitItems,proto3,oneof"`
}

type UpdateOrder_SetInvoiceAddress struct {
	SetInvoiceAddress *AddressDetails `protobuf:"bytes,5,opt,name=set_invoice_address,json=setInvoiceAddress,proto3,oneof"`
}

type UpdateOrder_SetShippingAddress struct {
	// no shipping addr assumes invoice addrq
	SetShippingAddress *AddressDetails `protobuf:"bytes,6,opt,name=set_shipping_address,json=setShippingAddress,proto3,oneof"`
}

type UpdateOrder_ChoosePayment struct {
	// invoice address needs to be filled in before it can be payed
	ChoosePayment *UpdateOrder_ChoosePaymentMethod `protobuf:"bytes,7,opt,name=choose_payment,json=choosePayment,proto3,oneof"`
}

type UpdateOrder_SetPaymentDetails struct {
	SetPaymentDetails *PaymentDetails `protobuf:"bytes,8,opt,name=set_payment_details,json=setPaymentDetails,proto3,oneof"`
}

type UpdateOrder_AddWittnessedTx struct {
	AddWittnessedTx *OrderTransaction `protobuf:"bytes,9,opt,name=add_wittnessed_tx,json=addWittnessedTx,proto3,oneof"`
}

type UpdateOrder_SetMerchantNotes struct {
	SetMerchantNotes string `protobuf:"bytes,10,opt,name=set_merchant_notes,json=setMerchantNotes,proto3,oneof"`
}

func (*UpdateOrder_Cancel_) isUpdateOrder_Action() {}

func (*UpdateOrder_ChangeItems_) isUpdateOrder_Action() {}

func (*UpdateOrder_CommitItems_) isUpdateOrder_Action() {}

func (*UpdateOrder_SetInvoiceAddress) isUpdateOrder_Action() {}

func (*UpdateOrder_SetShippingAddress) isUpdateOrder_Action() {}

func (*UpdateOrder_ChoosePayment) isUpdateOrder_Action() {}

func (*UpdateOrder_SetPaymentDetails) isUpdateOrder_Action() {}

func (*UpdateOrder_AddWittnessedTx) isUpdateOrder_Action() {}

func (*UpdateOrder_SetMerchantNotes) isUpdateOrder_Action() {}

// ShopEvent is the transport wrapper for a single event in a shop.
type ShopEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nonce must be unique for each event a keycard creates.
	// The sequence values need to increase monotonicly.
	// Since PB can't discern between the 0 value and
	// a missing field it should start with 1.
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Every signed event must be tied to a shop id. This allow the
	// event to processed outside the context of the currenct connection.
	ShopId *Uint256 `protobuf:"bytes,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty"`
	// the time when this event was created.
	// The relay should reject any events from the future
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Union:
	//
	//	*ShopEvent_Manifest
	//	*ShopEvent_UpdateManifest
	//	*ShopEvent_Account
	//	*ShopEvent_Listing
	//	*ShopEvent_UpdateListing
	//	*ShopEvent_ChangeInventory
	//	*ShopEvent_Tag
	//	*ShopEvent_UpdateTag
	//	*ShopEvent_CreateOrder
	//	*ShopEvent_UpdateOrder
	Union isShopEvent_Union `protobuf_oneof:"union"`
}

func (x *ShopEvent) Reset() {
	*x = ShopEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShopEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopEvent) ProtoMessage() {}

func (x *ShopEvent) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopEvent.ProtoReflect.Descriptor instead.
func (*ShopEvent) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{11}
}

func (x *ShopEvent) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ShopEvent) GetShopId() *Uint256 {
	if x != nil {
		return x.ShopId
	}
	return nil
}

func (x *ShopEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *ShopEvent) GetUnion() isShopEvent_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *ShopEvent) GetManifest() *Manifest {
	if x, ok := x.GetUnion().(*ShopEvent_Manifest); ok {
		return x.Manifest
	}
	return nil
}

func (x *ShopEvent) GetUpdateManifest() *UpdateManifest {
	if x, ok := x.GetUnion().(*ShopEvent_UpdateManifest); ok {
		return x.UpdateManifest
	}
	return nil
}

func (x *ShopEvent) GetAccount() *Account {
	if x, ok := x.GetUnion().(*ShopEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (x *ShopEvent) GetListing() *Listing {
	if x, ok := x.GetUnion().(*ShopEvent_Listing); ok {
		return x.Listing
	}
	return nil
}

func (x *ShopEvent) GetUpdateListing() *UpdateListing {
	if x, ok := x.GetUnion().(*ShopEvent_UpdateListing); ok {
		return x.UpdateListing
	}
	return nil
}

func (x *ShopEvent) GetChangeInventory() *ChangeInventory {
	if x, ok := x.GetUnion().(*ShopEvent_ChangeInventory); ok {
		return x.ChangeInventory
	}
	return nil
}

func (x *ShopEvent) GetTag() *Tag {
	if x, ok := x.GetUnion().(*ShopEvent_Tag); ok {
		return x.Tag
	}
	return nil
}

func (x *ShopEvent) GetUpdateTag() *UpdateTag {
	if x, ok := x.GetUnion().(*ShopEvent_UpdateTag); ok {
		return x.UpdateTag
	}
	return nil
}

func (x *ShopEvent) GetCreateOrder() *CreateOrder {
	if x, ok := x.GetUnion().(*ShopEvent_CreateOrder); ok {
		return x.CreateOrder
	}
	return nil
}

func (x *ShopEvent) GetUpdateOrder() *UpdateOrder {
	if x, ok := x.GetUnion().(*ShopEvent_UpdateOrder); ok {
		return x.UpdateOrder
	}
	return nil
}

type isShopEvent_Union interface {
	isShopEvent_Union()
}

type ShopEvent_Manifest struct {
	Manifest *Manifest `protobuf:"bytes,4,opt,name=manifest,proto3,oneof"`
}

type ShopEvent_UpdateManifest struct {
	UpdateManifest *UpdateManifest `protobuf:"bytes,5,opt,name=update_manifest,json=updateManifest,proto3,oneof"`
}

type ShopEvent_Account struct {
	Account *Account `protobuf:"bytes,6,opt,name=account,proto3,oneof"`
}

type ShopEvent_Listing struct {
	Listing *Listing `protobuf:"bytes,7,opt,name=listing,proto3,oneof"`
}

type ShopEvent_UpdateListing struct {
	UpdateListing *UpdateListing `protobuf:"bytes,8,opt,name=update_listing,json=updateListing,proto3,oneof"`
}

type ShopEvent_ChangeInventory struct {
	ChangeInventory *ChangeInventory `protobuf:"bytes,9,opt,name=change_inventory,json=changeInventory,proto3,oneof"`
}

type ShopEvent_Tag struct {
	Tag *Tag `protobuf:"bytes,10,opt,name=tag,proto3,oneof"`
}

type ShopEvent_UpdateTag struct {
	UpdateTag *UpdateTag `protobuf:"bytes,11,opt,name=update_tag,json=updateTag,proto3,oneof"`
}

type ShopEvent_CreateOrder struct {
	CreateOrder *CreateOrder `protobuf:"bytes,12,opt,name=create_order,json=createOrder,proto3,oneof"`
}

type ShopEvent_UpdateOrder struct {
	UpdateOrder *UpdateOrder `protobuf:"bytes,13,opt,name=update_order,json=updateOrder,proto3,oneof"`
}

func (*ShopEvent_Manifest) isShopEvent_Union() {}

func (*ShopEvent_UpdateManifest) isShopEvent_Union() {}

func (*ShopEvent_Account) isShopEvent_Union() {}

func (*ShopEvent_Listing) isShopEvent_Union() {}

func (*ShopEvent_UpdateListing) isShopEvent_Union() {}

func (*ShopEvent_ChangeInventory) isShopEvent_Union() {}

func (*ShopEvent_Tag) isShopEvent_Union() {}

func (*ShopEvent_UpdateTag) isShopEvent_Union() {}

func (*ShopEvent_CreateOrder) isShopEvent_Union() {}

func (*ShopEvent_UpdateOrder) isShopEvent_Union() {}

type Account_OnchainAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress *EthereumAddress `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	Tx             *Hash            `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"` // the hash of the transaction that alterd the contract state
}

func (x *Account_OnchainAction) Reset() {
	*x = Account_OnchainAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_OnchainAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_OnchainAction) ProtoMessage() {}

func (x *Account_OnchainAction) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_OnchainAction.ProtoReflect.Descriptor instead.
func (*Account_OnchainAction) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Account_OnchainAction) GetAccountAddress() *EthereumAddress {
	if x != nil {
		return x.AccountAddress
	}
	return nil
}

func (x *Account_OnchainAction) GetTx() *Hash {
	if x != nil {
		return x.Tx
	}
	return nil
}

// Binds the keycard to a wallet address of the user
type Account_KeyCardEnroll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeycardPubkey *PublicKey `protobuf:"bytes,1,opt,name=keycard_pubkey,json=keycardPubkey,proto3" json:"keycard_pubkey,omitempty"`
	// TODO: move to docs
	// What to do about checkouts of guest keycards?
	// - set to zero address
	// - expose  secret key during checkout for recovering access to order
	UserWallet *EthereumAddress `protobuf:"bytes,2,opt,name=user_wallet,json=userWallet,proto3" json:"user_wallet,omitempty"`
}

func (x *Account_KeyCardEnroll) Reset() {
	*x = Account_KeyCardEnroll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account_KeyCardEnroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account_KeyCardEnroll) ProtoMessage() {}

func (x *Account_KeyCardEnroll) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account_KeyCardEnroll.ProtoReflect.Descriptor instead.
func (*Account_KeyCardEnroll) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Account_KeyCardEnroll) GetKeycardPubkey() *PublicKey {
	if x != nil {
		return x.KeycardPubkey
	}
	return nil
}

func (x *Account_KeyCardEnroll) GetUserWallet() *EthereumAddress {
	if x != nil {
		return x.UserWallet
	}
	return nil
}

type UpdateListing_AddVariation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptionId  *ObjectId         `protobuf:"bytes,1,opt,name=option_id,json=optionId,proto3" json:"option_id,omitempty"`
	Variation *ListingVariation `protobuf:"bytes,2,opt,name=variation,proto3" json:"variation,omitempty"`
}

func (x *UpdateListing_AddVariation) Reset() {
	*x = UpdateListing_AddVariation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateListing_AddVariation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListing_AddVariation) ProtoMessage() {}

func (x *UpdateListing_AddVariation) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListing_AddVariation.ProtoReflect.Descriptor instead.
func (*UpdateListing_AddVariation) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UpdateListing_AddVariation) GetOptionId() *ObjectId {
	if x != nil {
		return x.OptionId
	}
	return nil
}

func (x *UpdateListing_AddVariation) GetVariation() *ListingVariation {
	if x != nil {
		return x.Variation
	}
	return nil
}

// Either created by a relay for an order that hasn't been payed in time.
// Or when the customer steps back from the purchase.
// This frees up the items locked up in the commited order.
type UpdateOrder_Cancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrder_Cancel) Reset() {
	*x = UpdateOrder_Cancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrder_Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrder_Cancel) ProtoMessage() {}

func (x *UpdateOrder_Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrder_Cancel.ProtoReflect.Descriptor instead.
func (*UpdateOrder_Cancel) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{10, 0}
}

// only valid before items were commited to the order
type UpdateOrder_ChangeItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adds    []*OrderedItem `protobuf:"bytes,1,rep,name=adds,proto3" json:"adds,omitempty"`
	Removes []*OrderedItem `protobuf:"bytes,2,rep,name=removes,proto3" json:"removes,omitempty"`
}

func (x *UpdateOrder_ChangeItems) Reset() {
	*x = UpdateOrder_ChangeItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrder_ChangeItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrder_ChangeItems) ProtoMessage() {}

func (x *UpdateOrder_ChangeItems) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrder_ChangeItems.ProtoReflect.Descriptor instead.
func (*UpdateOrder_ChangeItems) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{10, 1}
}

func (x *UpdateOrder_ChangeItems) GetAdds() []*OrderedItem {
	if x != nil {
		return x.Adds
	}
	return nil
}

func (x *UpdateOrder_ChangeItems) GetRemoves() []*OrderedItem {
	if x != nil {
		return x.Removes
	}
	return nil
}

type UpdateOrder_CommitItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateOrder_CommitItems) Reset() {
	*x = UpdateOrder_CommitItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrder_CommitItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrder_CommitItems) ProtoMessage() {}

func (x *UpdateOrder_CommitItems) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrder_CommitItems.ProtoReflect.Descriptor instead.
func (*UpdateOrder_CommitItems) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{10, 2}
}

// Created by a customer when they are ready to purchase an order
// This is followed by a PaymentDetails message
type UpdateOrder_ChoosePaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// has to be an accepted currency on the manifest
	Currency *ShopCurrency `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Payee    *Payee        `protobuf:"bytes,2,opt,name=payee,proto3" json:"payee,omitempty"`
}

func (x *UpdateOrder_ChoosePaymentMethod) Reset() {
	*x = UpdateOrder_ChoosePaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrder_ChoosePaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrder_ChoosePaymentMethod) ProtoMessage() {}

func (x *UpdateOrder_ChoosePaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_shop_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrder_ChoosePaymentMethod.ProtoReflect.Descriptor instead.
func (*UpdateOrder_ChoosePaymentMethod) Descriptor() ([]byte, []int) {
	return file_shop_events_proto_rawDescGZIP(), []int{10, 3}
}

func (x *UpdateOrder_ChoosePaymentMethod) GetCurrency() *ShopCurrency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *UpdateOrder_ChoosePaymentMethod) GetPayee() *Payee {
	if x != nil {
		return x.Payee
	}
	return nil
}

var File_shop_events_proto protoreflect.FileDescriptor

var file_shop_events_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x1a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x96, 0x03, 0x0a, 0x08, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x32, 0x35, 0x36, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x06, 0x70, 0x61, 0x79, 0x65, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x46, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0xf8, 0x05, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x50, 0x61, 0x79,
	0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x48,
	0x01, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x65, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x15, 0x61,
	0x64, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x14, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x02, 0x52, 0x12, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x16, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x1f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x1b, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x64, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa2, 0x04, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4b,
	0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x4b, 0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x1a, 0x79, 0x0a, 0x0d, 0x4f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x02,
	0x74, 0x78, 0x1a, 0x8d, 0x01, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x63, 0x61, 0x72, 0x64, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x02, 0x0a,
	0x07, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x32, 0x35, 0x36, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x22, 0xef, 0x05, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x32, 0x35, 0x36, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x4e, 0x0a,
	0x0e, 0x61, 0x64, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x7f, 0x0a, 0x0c,
	0x41, 0x64, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69,
	0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x92,
	0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xae, 0x08, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x02,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x03, 0x52, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x10, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61,
	0x73, 0x73, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x48,
	0x06, 0x52, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x07, 0x52, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x5c, 0x0a, 0x1a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x08, 0x52, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x17, 0x77, 0x69, 0x74, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x77,
	0x69, 0x74, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x65, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x22, 0x34, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xd4, 0x07, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x63,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x4b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x57, 0x69, 0x74, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x78, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x08,
	0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x1a, 0x6f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x76, 0x0a, 0x13, 0x43, 0x68, 0x6f, 0x6f,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x35, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x65, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x05, 0x0a, 0x09, 0x53,
	0x68, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x32, 0x35, 0x36, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a,
	0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d,
	0x61, 0x73, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x37,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shop_events_proto_rawDescOnce sync.Once
	file_shop_events_proto_rawDescData = file_shop_events_proto_rawDesc
)

func file_shop_events_proto_rawDescGZIP() []byte {
	file_shop_events_proto_rawDescOnce.Do(func() {
		file_shop_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_shop_events_proto_rawDescData)
	})
	return file_shop_events_proto_rawDescData
}

var file_shop_events_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_shop_events_proto_goTypes = []interface{}{
	(*Manifest)(nil),                        // 0: market.mass.Manifest
	(*UpdateManifest)(nil),                  // 1: market.mass.UpdateManifest
	(*Account)(nil),                         // 2: market.mass.Account
	(*Listing)(nil),                         // 3: market.mass.Listing
	(*UpdateListing)(nil),                   // 4: market.mass.UpdateListing
	(*ChangeInventory)(nil),                 // 5: market.mass.ChangeInventory
	(*Tag)(nil),                             // 6: market.mass.Tag
	(*UpdateTag)(nil),                       // 7: market.mass.UpdateTag
	(*Order)(nil),                           // 8: market.mass.Order
	(*CreateOrder)(nil),                     // 9: market.mass.CreateOrder
	(*UpdateOrder)(nil),                     // 10: market.mass.UpdateOrder
	(*ShopEvent)(nil),                       // 11: market.mass.ShopEvent
	(*Account_OnchainAction)(nil),           // 12: market.mass.Account.OnchainAction
	(*Account_KeyCardEnroll)(nil),           // 13: market.mass.Account.KeyCardEnroll
	(*UpdateListing_AddVariation)(nil),      // 14: market.mass.UpdateListing.AddVariation
	(*UpdateOrder_Cancel)(nil),              // 15: market.mass.UpdateOrder.Cancel
	(*UpdateOrder_ChangeItems)(nil),         // 16: market.mass.UpdateOrder.ChangeItems
	(*UpdateOrder_CommitItems)(nil),         // 17: market.mass.UpdateOrder.CommitItems
	(*UpdateOrder_ChoosePaymentMethod)(nil), // 18: market.mass.UpdateOrder.ChoosePaymentMethod
	(*Uint256)(nil),                         // 19: market.mass.Uint256
	(*Payee)(nil),                           // 20: market.mass.Payee
	(*ShopCurrency)(nil),                    // 21: market.mass.ShopCurrency
	(*ShippingRegion)(nil),                  // 22: market.mass.ShippingRegion
	(*OrderPriceModifier)(nil),              // 23: market.mass.OrderPriceModifier
	(*ObjectId)(nil),                        // 24: market.mass.ObjectId
	(*PublicKey)(nil),                       // 25: market.mass.PublicKey
	(*ListingMetadata)(nil),                 // 26: market.mass.ListingMetadata
	(ListingViewState)(0),                   // 27: market.mass.ListingViewState
	(*ListingOption)(nil),                   // 28: market.mass.ListingOption
	(*ListingStockStatus)(nil),              // 29: market.mass.ListingStockStatus
	(*OrderedItem)(nil),                     // 30: market.mass.OrderedItem
	(*timestamppb.Timestamp)(nil),           // 31: google.protobuf.Timestamp
	(*AddressDetails)(nil),                  // 32: market.mass.AddressDetails
	(*PaymentDetails)(nil),                  // 33: market.mass.PaymentDetails
	(*OrderTransaction)(nil),                // 34: market.mass.OrderTransaction
	(*EthereumAddress)(nil),                 // 35: market.mass.EthereumAddress
	(*Hash)(nil),                            // 36: market.mass.Hash
	(*ListingVariation)(nil),                // 37: market.mass.ListingVariation
}
var file_shop_events_proto_depIdxs = []int32{
	19, // 0: market.mass.Manifest.token_id:type_name -> market.mass.Uint256
	20, // 1: market.mass.Manifest.payees:type_name -> market.mass.Payee
	21, // 2: market.mass.Manifest.accepted_currencies:type_name -> market.mass.ShopCurrency
	21, // 3: market.mass.Manifest.pricing_currency:type_name -> market.mass.ShopCurrency
	22, // 4: market.mass.Manifest.shipping_regions:type_name -> market.mass.ShippingRegion
	23, // 5: market.mass.Manifest.order_price_modifiers:type_name -> market.mass.OrderPriceModifier
	20, // 6: market.mass.UpdateManifest.add_payee:type_name -> market.mass.Payee
	20, // 7: market.mass.UpdateManifest.remove_payee:type_name -> market.mass.Payee
	21, // 8: market.mass.UpdateManifest.add_accepted_currencies:type_name -> market.mass.ShopCurrency
	21, // 9: market.mass.UpdateManifest.remove_accepted_currencies:type_name -> market.mass.ShopCurrency
	21, // 10: market.mass.UpdateManifest.set_pricing_currency:type_name -> market.mass.ShopCurrency
	23, // 11: market.mass.UpdateManifest.add_order_price_modifiers:type_name -> market.mass.OrderPriceModifier
	24, // 12: market.mass.UpdateManifest.remove_order_price_modifier_ids:type_name -> market.mass.ObjectId
	22, // 13: market.mass.UpdateManifest.add_shipping_regions:type_name -> market.mass.ShippingRegion
	12, // 14: market.mass.Account.add:type_name -> market.mass.Account.OnchainAction
	12, // 15: market.mass.Account.remove:type_name -> market.mass.Account.OnchainAction
	13, // 16: market.mass.Account.enroll_keycard:type_name -> market.mass.Account.KeyCardEnroll
	25, // 17: market.mass.Account.revoke_keycard:type_name -> market.mass.PublicKey
	24, // 18: market.mass.Listing.id:type_name -> market.mass.ObjectId
	19, // 19: market.mass.Listing.price:type_name -> market.mass.Uint256
	26, // 20: market.mass.Listing.metadata:type_name -> market.mass.ListingMetadata
	27, // 21: market.mass.Listing.view_state:type_name -> market.mass.ListingViewState
	28, // 22: market.mass.Listing.options:type_name -> market.mass.ListingOption
	29, // 23: market.mass.Listing.stock_statuses:type_name -> market.mass.ListingStockStatus
	24, // 24: market.mass.UpdateListing.id:type_name -> market.mass.ObjectId
	19, // 25: market.mass.UpdateListing.price:type_name -> market.mass.Uint256
	26, // 26: market.mass.UpdateListing.metadata:type_name -> market.mass.ListingMetadata
	27, // 27: market.mass.UpdateListing.view_state:type_name -> market.mass.ListingViewState
	28, // 28: market.mass.UpdateListing.add_options:type_name -> market.mass.ListingOption
	24, // 29: market.mass.UpdateListing.remove_option_ids:type_name -> market.mass.ObjectId
	14, // 30: market.mass.UpdateListing.add_variations:type_name -> market.mass.UpdateListing.AddVariation
	24, // 31: market.mass.UpdateListing.remove_variation_ids:type_name -> market.mass.ObjectId
	29, // 32: market.mass.UpdateListing.stock_updates:type_name -> market.mass.ListingStockStatus
	24, // 33: market.mass.ChangeInventory.id:type_name -> market.mass.ObjectId
	24, // 34: market.mass.ChangeInventory.variation_ids:type_name -> market.mass.ObjectId
	24, // 35: market.mass.Tag.id:type_name -> market.mass.ObjectId
	24, // 36: market.mass.Tag.listing_ids:type_name -> market.mass.ObjectId
	24, // 37: market.mass.UpdateTag.id:type_name -> market.mass.ObjectId
	24, // 38: market.mass.UpdateTag.add_listing_ids:type_name -> market.mass.ObjectId
	24, // 39: market.mass.UpdateTag.remove_listing_ids:type_name -> market.mass.ObjectId
	24, // 40: market.mass.Order.id:type_name -> market.mass.ObjectId
	30, // 41: market.mass.Order.items:type_name -> market.mass.OrderedItem
	31, // 42: market.mass.Order.canceled_at:type_name -> google.protobuf.Timestamp
	31, // 43: market.mass.Order.commited_at:type_name -> google.protobuf.Timestamp
	32, // 44: market.mass.Order.invoice_address:type_name -> market.mass.AddressDetails
	32, // 45: market.mass.Order.shipping_address:type_name -> market.mass.AddressDetails
	31, // 46: market.mass.Order.address_updated_at:type_name -> google.protobuf.Timestamp
	20, // 47: market.mass.Order.chosen_payee:type_name -> market.mass.Payee
	21, // 48: market.mass.Order.chosen_currency:type_name -> market.mass.ShopCurrency
	33, // 49: market.mass.Order.payment_details:type_name -> market.mass.PaymentDetails
	31, // 50: market.mass.Order.payment_details_created_at:type_name -> google.protobuf.Timestamp
	34, // 51: market.mass.Order.wittnessed_transactions:type_name -> market.mass.OrderTransaction
	24, // 52: market.mass.CreateOrder.id:type_name -> market.mass.ObjectId
	24, // 53: market.mass.UpdateOrder.id:type_name -> market.mass.ObjectId
	15, // 54: market.mass.UpdateOrder.cancel:type_name -> market.mass.UpdateOrder.Cancel
	16, // 55: market.mass.UpdateOrder.change_items:type_name -> market.mass.UpdateOrder.ChangeItems
	17, // 56: market.mass.UpdateOrder.commit_items:type_name -> market.mass.UpdateOrder.CommitItems
	32, // 57: market.mass.UpdateOrder.set_invoice_address:type_name -> market.mass.AddressDetails
	32, // 58: market.mass.UpdateOrder.set_shipping_address:type_name -> market.mass.AddressDetails
	18, // 59: market.mass.UpdateOrder.choose_payment:type_name -> market.mass.UpdateOrder.ChoosePaymentMethod
	33, // 60: market.mass.UpdateOrder.set_payment_details:type_name -> market.mass.PaymentDetails
	34, // 61: market.mass.UpdateOrder.add_wittnessed_tx:type_name -> market.mass.OrderTransaction
	19, // 62: market.mass.ShopEvent.shop_id:type_name -> market.mass.Uint256
	31, // 63: market.mass.ShopEvent.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 64: market.mass.ShopEvent.manifest:type_name -> market.mass.Manifest
	1,  // 65: market.mass.ShopEvent.update_manifest:type_name -> market.mass.UpdateManifest
	2,  // 66: market.mass.ShopEvent.account:type_name -> market.mass.Account
	3,  // 67: market.mass.ShopEvent.listing:type_name -> market.mass.Listing
	4,  // 68: market.mass.ShopEvent.update_listing:type_name -> market.mass.UpdateListing
	5,  // 69: market.mass.ShopEvent.change_inventory:type_name -> market.mass.ChangeInventory
	6,  // 70: market.mass.ShopEvent.tag:type_name -> market.mass.Tag
	7,  // 71: market.mass.ShopEvent.update_tag:type_name -> market.mass.UpdateTag
	9,  // 72: market.mass.ShopEvent.create_order:type_name -> market.mass.CreateOrder
	10, // 73: market.mass.ShopEvent.update_order:type_name -> market.mass.UpdateOrder
	35, // 74: market.mass.Account.OnchainAction.account_address:type_name -> market.mass.EthereumAddress
	36, // 75: market.mass.Account.OnchainAction.tx:type_name -> market.mass.Hash
	25, // 76: market.mass.Account.KeyCardEnroll.keycard_pubkey:type_name -> market.mass.PublicKey
	35, // 77: market.mass.Account.KeyCardEnroll.user_wallet:type_name -> market.mass.EthereumAddress
	24, // 78: market.mass.UpdateListing.AddVariation.option_id:type_name -> market.mass.ObjectId
	37, // 79: market.mass.UpdateListing.AddVariation.variation:type_name -> market.mass.ListingVariation
	30, // 80: market.mass.UpdateOrder.ChangeItems.adds:type_name -> market.mass.OrderedItem
	30, // 81: market.mass.UpdateOrder.ChangeItems.removes:type_name -> market.mass.OrderedItem
	21, // 82: market.mass.UpdateOrder.ChoosePaymentMethod.currency:type_name -> market.mass.ShopCurrency
	20, // 83: market.mass.UpdateOrder.ChoosePaymentMethod.payee:type_name -> market.mass.Payee
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_shop_events_proto_init() }
func file_shop_events_proto_init() {
	if File_shop_events_proto != nil {
		return
	}
	file_base_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_shop_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateListing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeInventory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShopEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_OnchainAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account_KeyCardEnroll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateListing_AddVariation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrder_Cancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrder_ChangeItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrder_CommitItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shop_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrder_ChoosePaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shop_events_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_shop_events_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Account_Add)(nil),
		(*Account_Remove)(nil),
		(*Account_EnrollKeycard)(nil),
		(*Account_RevokeKeycard)(nil),
	}
	file_shop_events_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_shop_events_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_shop_events_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_shop_events_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UpdateOrder_Cancel_)(nil),
		(*UpdateOrder_ChangeItems_)(nil),
		(*UpdateOrder_CommitItems_)(nil),
		(*UpdateOrder_SetInvoiceAddress)(nil),
		(*UpdateOrder_SetShippingAddress)(nil),
		(*UpdateOrder_ChoosePayment)(nil),
		(*UpdateOrder_SetPaymentDetails)(nil),
		(*UpdateOrder_AddWittnessedTx)(nil),
		(*UpdateOrder_SetMerchantNotes)(nil),
	}
	file_shop_events_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ShopEvent_Manifest)(nil),
		(*ShopEvent_UpdateManifest)(nil),
		(*ShopEvent_Account)(nil),
		(*ShopEvent_Listing)(nil),
		(*ShopEvent_UpdateListing)(nil),
		(*ShopEvent_ChangeInventory)(nil),
		(*ShopEvent_Tag)(nil),
		(*ShopEvent_UpdateTag)(nil),
		(*ShopEvent_CreateOrder)(nil),
		(*ShopEvent_UpdateOrder)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shop_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shop_events_proto_goTypes,
		DependencyIndexes: file_shop_events_proto_depIdxs,
		MessageInfos:      file_shop_events_proto_msgTypes,
	}.Build()
	File_shop_events_proto = out.File
	file_shop_events_proto_rawDesc = nil
	file_shop_events_proto_goTypes = nil
	file_shop_events_proto_depIdxs = nil
}
