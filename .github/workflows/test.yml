# SPDX-FileCopyrightText: 2024 - 2025 Mass Labs
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: test

on: [push]

jobs:
  relay-tests:
    runs-on: [self-hosted, linux]
    # TODO: kludge until we figured out why pytest sometimes doesnt exit when tests fail
    timeout-minutes: 20

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          path: relay

      # not needed on self-hosted but kept around if we want to use it on github-hosted
      #- name: Install Nix
      #  uses: DeterminateSystems/nix-installer-action@main
      #- uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: DeterminateSystems/flake-checker-action@main
        with:
          flake-lock-path: relay/flake.lock

      - name: Extract branches
        shell: bash
        run: |
          echo "relay_pr=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: branches

      - name: build relay and deploy services (anvil, postgres, ipfs)
        run: nix develop -c local-testnet-dev -D -L logs/process-compose.log
        working-directory: relay

      - name: git clone pystoretest
        uses: ./relay/.github/actions/checkout
        with:
          repository: masslbs/pystoretest
          path: pystoretest
          ref: ${{ steps.branches.outputs.relay_pr }}
          fallback-branch: network-v4

      - name: prepare env file for pystoretest
        run: |
          cp .env.sample .env
          cat .env
        working-directory: pystoretest

      # TODO: we should be able to move these to probes
      # but we still need a way to see if relay is running...
      - name: check services
        working-directory: relay 
        run: |
          set -e
          curl http://localhost:8321/live
          curl http://localhost:8321/processes | jq .data

          timeout=10;
          while [ $timeout -gt 0 ]; do
            # check if relay is ready
            processStateFname=logs/processes-${timeout}.json
            curl http://localhost:8321/processes > $processStateFname
            isReady=$(cat $processStateFname | jq -r '.data[] | select(.name == "relay") | .is_ready')
            if [ "$isReady" == "Ready" ]; then
              break
            fi
            echo "Relay is not ready, waiting for $timeout seconds"
            timeout=$((timeout - 1))
            sleep 5
          done

          if [ "$isReady" != "Ready" ]; then
            echo "Relay is not ready"
            nix run '.#local-testnet-dev' -- down
            exit 1
          fi

          # should be redundant but just in case
          curl http://localhost:4444/health
          curl http://localhost:5001/api/v0/version -X POST
          curl http://localhost:8545/ -X POST -H 'content-type: application/json' --data-raw '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":0}'
        
      # test VM has 6 cores so we spare one for the relay and docker services
      - name: Run tests
        run: nix develop -c pytest -x -vv -n 5 --benchmark-skip
        working-directory: pystoretest

      - name: Run benchmarks
        if: runner.name == 'ci-runner2'
        run: nix develop -c pytest --benchmark-only --benchmark-json ../bench-output.json
        working-directory: pystoretest

      - name: Shutdown services
        run: nix run '.#local-testnet-dev' -- down
        working-directory: relay

      # TODO: compare against previous run
      - name: Post benchmark results
        if: runner.name == 'ci-runner2'
        run: |
          BENCHMARK_SUMMARY=$(jq -r '
          "## Benchmark Results\n\n" +
          "| Test Name | Mean (s) | Median (s) | Min (s) | Max (s) | Stddev (s) | Ops/sec |\n" +
          "|-----------|----------|------------|---------|---------|------------|---------|\n" +
          (.benchmarks | to_entries | map(
            "| \(.value.name) | \(.value.stats.mean | tostring | .[0:8]) | \(.value.stats.median | tostring | .[0:8]) | \(.value.stats.min | tostring | .[0:8]) | \(.value.stats.max | tostring | .[0:8]) | \(.value.stats.stddev | tostring | .[0:8]) | \(.value.stats.ops | tostring | .[0:8]) |"
          ) | join("\n")) +
          "\n\n### Commit Info\n" +
          "- **Commit:** \(.commit_info.id)\n" +
          "- **Time:** \(.commit_info.time)\n"
          ' ../bench-output.json)
          echo "$BENCHMARK_SUMMARY" >> $GITHUB_STEP_SUMMARY
        working-directory: relay

      - name: Upload service compose log on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: process-compose-log.txt
          path: relay/logs/